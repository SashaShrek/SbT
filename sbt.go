package main

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"os"
	"reflect"
	"sbt/apay"
	"sbt/cusers"
	"sbt/logger"
	"sbt/payment"
	"sbt/random"
	"sbt/request"
	"strconv"
	"time"

	db "github.com/SashaShrek/db"

	tgbotapi "github.com/Syfaro/telegram-bot-api"
)

var (
	ID_CHANNEL *int64
	ID_CHAT    *int64
	PRICE      *string
	SHOPID     *string
	BACK_LINK  *string
	TOKEN      *string
	PAY_TOKEN  *string
)

var (
	bot *tgbotapi.BotAPI
	pay = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–î–û–°–¢–£–ü –ù–ê 1 –ú–ï–°–Ø–¶ - 999‚ÇΩ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–ö–ê–ö –û–ü–õ–ê–¢–ò–¢–¨?"),
			tgbotapi.NewKeyboardButton("–ê–í–¢–û–ü–õ–ê–¢–ï–ñ–ò"),
		),
	)
)

type (
	tlgrm struct {
		count int
	}
	ResponseObj struct {
		Id     string `json:"id"`
		Status string `json:"status"`
	}
	ResponsePay struct {
		Event  string      `json:"event"`
		Object ResponseObj `json:"object"`
	}
	Data struct {
		tlgrm_id string
		MsgId    int
		PayId    string
	}
)

func readSecretData() {
	file, err := os.Open("data.xml")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer file.Close()

	type Database struct {
		Host     string `xml:"host"`
		Port     int    `xml:"port"`
		User     string `xml:"user"`
		Password string `xml:"password"`
		DBname   string `xml:"dbname"`
	}
	type Datas struct {
		XMLName    xml.Name `xml:"data"`
		Id_channel int64    `xml:"id_channel"`
		Id_chat    int64    `xml:"id_chat"`
		Price      string   `xml:"price"`
		ShopdId    string   `xml:"shopId"`
		BackLink   string   `xml:"backLink"`
		Token      string   `xml:"token"`
		PayToken   string   `xml:"payToken"`
		Datab      Database `xml:"database"`
	}
	var data Datas
	_ = xml.NewDecoder(file).Decode(&data)
	ID_CHANNEL = &data.Id_channel
	ID_CHAT = &data.Id_chat
	PRICE = &data.Price
	SHOPID = &data.ShopdId
	BACK_LINK = &data.BackLink
	TOKEN = &data.Token
	PAY_TOKEN = &data.PayToken
	db.FillData(&data.Datab.Host, &data.Datab.Port, &data.Datab.User, &data.Datab.Password, &data.Datab.DBname)
}

func main() {
	readSecretData()
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Println("GET request")
		fmt.Fprintf(w, "Not found")
	})
	botTime, err := createBotConnection(*TOKEN)
	if err != nil {
		logger.SetLog("-1", "error", "connectionBot", err.Error())
	}
	logger.SetLog("-1", "info", "connectionBot", "OK")
	bot = botTime
	go getCountUsers()
	//go newVersion()
	go approveInvite()
	go timer()
	go update()

	http.HandleFunc("/sbt_two_k_twenty_one", getResponse)
	http.ListenAndServe(":20021", nil)
}

func getCountUsers() {
	var query string
	var err error
	for range time.Tick(61 * time.Minute) {
		query = "insert into cusers (row_id, number, date) values " +
			"((select max(row_id) + 1 from cusers), (select count(*) from users where is_pay = true), current_timestamp)"
		err = db.InsertOrUpdate(query)
		if err != nil {
			logger.SetLog("-1", "error", "getCountUsers", err.Error())
			continue
		}
		logger.SetLog("-1", "info", "getCountUsers", "–£—Å–ø–µ—à–Ω–æ")
	}
}

func approveInvite() {
	cusers.Appr(bot, TOKEN, ID_CHANNEL)
}

func newVersion() {
	text := "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ–¥. –ß—Ç–æ–±—ã —É–∑–Ω–∞–≤–∞—Ç—å –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö (–ø–µ—Ä–∏–æ–¥–µ –∏—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è), –Ω–æ–≤—à–µ—Å—Ç–≤–∞—Ö –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö, –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–ª—è —ç—Ç–∏—Ö —Ü–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞: https://t.me/+3MvQOOiNcZFiZmZi"
	rows, dbase, _ := db.Select("select tlgrm_id from users where is_pay = true")
	defer rows.Close()
	defer dbase.Close()
	type TlgrmId struct {
		tlgrm_id string
	}
	var tlgrmId TlgrmId
	var tgId int64
	var message tgbotapi.MessageConfig
	for rows.Next() {
		err := rows.Scan(&tlgrmId.tlgrm_id)
		if err != nil {
			continue
		}
		tgId, _ = strconv.ParseInt(tlgrmId.tlgrm_id, 10, 64)
		message = tgbotapi.NewMessage(tgId, text)
		message.ReplyMarkup = pay
		bot.Send(message)
	}
	logger.SetLog("-1", "info", "updated", "–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
}

func timer() {
	cusers.Keks(bot, TOKEN, ID_CHANNEL, ID_CHAT)
	for range time.Tick(24 * time.Hour) {
		cusers.Keks(bot, TOKEN, ID_CHANNEL, ID_CHAT)
	}
}

func getResponse(res http.ResponseWriter, req *http.Request) {
	logger.SetLog("-1", "info", "serverListen", "OK")
	if req.Method != "POST" {
		fmt.Fprintf(res, "Not found")
	}

	var resp ResponsePay
	err := json.NewDecoder(req.Body).Decode(&resp)
	if err != nil {
		fmt.Println(err)
	}

	var data Data
	rows, datab, _ := db.Select(fmt.Sprintf("select tlgrm_id, message_pay_id, payment_id from users where id_last_transaction = '%s'", resp.Object.Id))
	for rows.Next() {
		err := rows.Scan(&data.tlgrm_id, &data.MsgId, &data.PayId)
		if err != nil {
			continue
		}
	}
	tlgrm_id, _ := strconv.ParseInt(data.tlgrm_id, 10, 64)
	rows.Close()
	datab.Close()
	switch resp.Event {
	case "payment.succeeded":
		bot.Send(tgbotapi.NewMessage(tlgrm_id,
			payment.PaymentDone(tlgrm_id, resp.Object.Id, data.MsgId, TOKEN, ID_CHANNEL, ID_CHAT)))
	case "payment.canceled":
		resp := request.GetPaymentObj(*PRICE, *BACK_LINK, *SHOPID, *PAY_TOKEN, data.PayId)
		respUser, ownerUser, err := payment.PaymentCancel(resp.Cancel.Party, resp.Cancel.Reason, tlgrm_id)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(tlgrm_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.\n\n–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω!"))
		}
		logger.SetLog(fmt.Sprint(tlgrm_id), "info", "payment", respUser)
		bot.Send(tgbotapi.NewMessage(tlgrm_id,
			fmt.Sprintf("–ü–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω %s! %s\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∏—Ç—å –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.", ownerUser, respUser)))
	}
	bot.Send(tgbotapi.NewDeleteMessage(tlgrm_id, data.MsgId))
	_ = db.InsertOrUpdate(fmt.Sprintf("update users set message_pay_id = 0, link_pay = null, id_last_transaction = null, payment_id = null where id_last_transaction = '%s'",
		resp.Object.Id))
}

func createBotConnection(token string) (*tgbotapi.BotAPI, error) {
	botConnect, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}
	return botConnect, nil
}

func update() {
	bot.Debug = false
	var ucfg tgbotapi.UpdateConfig = tgbotapi.NewUpdate(0)
	ucfg.Timeout = 60
	updates, err := bot.GetUpdatesChan(ucfg)
	if err != nil {
		logger.SetLog("-1", "error", "update", err.Error())
		return
	}
	logger.SetLog("-1", "info", "update", "OK")
	for update := range updates {
		if update.CallbackQuery != nil {
			var result bool
			var msgId int
			var message tgbotapi.CallbackConfig
			switch update.CallbackQuery.Data {
			case "/–ø–æ–¥–∫–ª—é—á–∏—Ç—å":
				result, msgId = apay.GetAutoPay(update.CallbackQuery.From.ID)
				if result {
					message = tgbotapi.NewCallback(update.CallbackQuery.ID, "–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
				} else {
					result = true
					_ = db.InsertOrUpdate(fmt.Sprintf("update users set autopay = %t where tlgrm_id = '%s'",
						result, fmt.Sprint(update.CallbackQuery.From.ID)))
					message = tgbotapi.NewCallback(update.CallbackQuery.ID, "–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
				}
				message.ShowAlert = true
				bot.AnswerCallbackQuery(message)
				bot.Send(tgbotapi.NewMessage(int64(update.CallbackQuery.From.ID),
					"–ß—Ç–æ–±—ã –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π!"))
			case "/–æ—Ç–∫–ª—é—á–∏—Ç—å":
				result, msgId = apay.GetAutoPay(update.CallbackQuery.From.ID)
				if result {
					result = false
					_ = db.InsertOrUpdate(fmt.Sprintf("update users set autopay = %t where tlgrm_id = '%s'",
						result, fmt.Sprint(update.CallbackQuery.From.ID)))
					message = tgbotapi.NewCallback(update.CallbackQuery.ID, "–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
				} else {
					message = tgbotapi.NewCallback(update.CallbackQuery.ID, "–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω")
				}
				message.ShowAlert = true
				bot.AnswerCallbackQuery(message)
			}
			bot.Send(tgbotapi.NewDeleteMessage(int64(update.CallbackQuery.From.ID), msgId))
			_ = db.InsertOrUpdate(fmt.Sprintf("update users set autopay_msg_id = 0 where tlgrm_id = '%s'",
				fmt.Sprint(update.CallbackQuery.From.ID)))
		}
		if update.Message == nil {
			continue
		}
		if reflect.TypeOf(update.Message.Text).Kind() == reflect.String && update.Message.Text != "" {
			if int64(*ID_CHAT) == update.Message.Chat.ID {
				continue
			}
			switch update.Message.Text {
			case "/start":
				msg := "‚ô•Ô∏è–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª, —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –≤—Å–µ–º, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –º–Ω–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö" +
					" –ø–ª–æ—â–∞–¥–∫–∞—Ö —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–µ—â–∏, —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è–º–∏. " +
					"–£ –≤–∞—Å –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –≤—ã–±–∏—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ –≤–µ—â–∏ —Ä–∞–∑–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞, –ø–æ–∫—É–ø–∞—Ç—å –±—Ä–µ–Ω–¥—ã" +
					" –∏ –≤–∏–Ω—Ç–∞–∂ –ø–æ —Ü–µ–Ω–µ –ú–∞—Å—Å-–º–∞—Ä–∫–µ—Ç–∞, –∏–º–µ—Ç—å –º–µ–Ω—è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, –∫–∞–∫ –ª–∏—á–Ω–æ–≥–æ —Å—Ç–∏–ª–∏—Å—Ç–∞ –∏ –ø–æ–¥—Ä—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è" +
					" –ø–ª–æ—Ö–æ–≥–æ –Ω–µ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç üòà"
				message := tgbotapi.NewMessage(update.Message.Chat.ID, msg)
				bot.Send(message)
				msg = fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %s!\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞,"+
					" —Ç—ã –º–æ–∂–µ—à—å –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª STYLE by Tsymlyanskaya.", update.Message.From.FirstName)
				message = tgbotapi.NewMessage(update.Message.Chat.ID, msg)
				message.ReplyMarkup = pay
				bot.Send(message)
				var query string = fmt.Sprintf("select count(*) from users where tlgrm_id = '%s'", fmt.Sprint(update.Message.Chat.ID))
				rows, datab, err := db.Select(query)
				if err != nil {
					logger.SetLog("null", "error", "start", err.Error())
					rows.Close()
					datab.Close()
					continue
				}
				var id tlgrm
				for rows.Next() {
					err = rows.Scan(&id.count)
					if err != nil {
						continue
					}
				}
				if id.count == 0 {
					query = fmt.Sprintf("insert into users (row_id, tlgrm_id"+
						") values ('%s', '%s')", random.GetRandom(10), fmt.Sprint(update.Message.Chat.ID))
					err = db.InsertOrUpdate(query)
					if err != nil {
						fmt.Println(err)
					}
					logger.SetLog(fmt.Sprint(update.Message.Chat.ID), "info", "start", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")
				} else {
					logger.SetLog(fmt.Sprint(update.Message.Chat.ID), "info", "start", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
					message = tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–í–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: supp.sbt@gmail.com\n\n–í–∞—à Telegram ID: %s, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ—á—Ç—É.", fmt.Sprint(update.Message.Chat.ID)))
					bot.Send(message)
				}
				rows.Close()
				datab.Close()
			case pay.Keyboard[0][0].Text:
				rand := random.GetRandom(18)
				res := request.GetPaymentObj(*PRICE, *BACK_LINK, *SHOPID, *PAY_TOKEN, rand)
				var description string = "–û–Ω–ª–∞–π–Ω —à–æ–ø–ø–∏–Ω–≥ –∏ –º–æ–∏ –ª–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏/—Å–µ–∫—Ä–µ—Ç—ã, –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–∞–∂–¥–æ–π –∏–∑ –≤–∞—Å üíã"
				message := tgbotapi.NewMessage(update.Message.Chat.ID, description)
				message.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonURL(fmt.Sprintf("–û–ø–ª–∞—Ç–∏—Ç—å %s‚ÇΩ", *PRICE), res.ConfirmationsNew.ConfUrl),
					),
				)
				messageSended, err := bot.Send(message)
				if err != nil {
					logger.SetLog(fmt.Sprint(update.Message.Chat.ID), "error", "getIdMsg", err.Error())
					bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, err.Error()))
					continue
				}
				msgId := messageSended.MessageID
				var query string = fmt.Sprintf("update users set message_pay_id = %d, link_pay = '%s', id_last_transaction = '%s', payment_id = '%s' where tlgrm_id = '%s'",
					msgId, res.ConfirmationsNew.ConfUrl, res.Id, rand, fmt.Sprint(update.Message.Chat.ID))
				_ = db.InsertOrUpdate(query)
			case pay.Keyboard[1][0].Text:
				howPayment := "–ß—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–æ–≤:\n" +
					"1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–î–û–°–¢–£–ü –ù–ê 1 –ú–ï–°–Ø–¶ - 999‚ÇΩ¬ª\n" +
					"2. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –∏ –∫–Ω–æ–ø–∫—É ¬´–û–ü–õ–ê–¢–ò–¢–¨ 999.00‚ÇΩ¬ª, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ—ë\n" +
					"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–∫–∏. –í—ã –ø–æ–ø–∞–¥—ë—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã. –ù–∞ –Ω–µ–π –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è - –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É\n" +
					"4. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª\n" +
					"5. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç –∫ –±–æ—Ç—É, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω¬ª, –ø–æ—Ç–æ–º –Ω–∞–∂–∞—Ç—å –Ω–∞ –∑–µ–ª—ë–Ω—É—é –∫–Ω–æ–ø–∫—É –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞ (¬´SEND MESSAGE¬ª) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ.\n"
				bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, howPayment))
			case pay.Keyboard[1][1].Text:
				text := "[ –¢–ï–°–¢ - –°–ï–ô–ß–ê–° –ê–í–¢–û–ü–õ–ê–¢–ï–ñ–ò –†–ê–ë–û–¢–ê–¢–¨ –ù–ï –ë–£–î–£–¢ ]\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç—ë–∂? –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ –≥–∞–ª–æ—á–∫—É (‚úì), –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å - –∫—Ä–µ—Å—Ç–∏–∫ (‚úó).\n" +
					"–ê–≤—Ç–æ–ø–ª–∞—Ç—ë–∂ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–µ!"
				message := tgbotapi.NewMessage(update.Message.Chat.ID, text)
				message.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("‚úì", "/–ø–æ–¥–∫–ª—é—á–∏—Ç—å"),
						tgbotapi.NewInlineKeyboardButtonData("‚úó", "/–æ—Ç–∫–ª—é—á–∏—Ç—å"),
					),
				)
				msgId, _ := bot.Send(message)
				_ = db.InsertOrUpdate(fmt.Sprintf("update users set autopay_msg_id = %d where tlgrm_id = '%s'",
					msgId.MessageID, fmt.Sprint(update.Message.Chat.ID)))
			default:
				message := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã!")
				message.ReplyMarkup = pay
				bot.Send(message)
			}
		}
	}
}
